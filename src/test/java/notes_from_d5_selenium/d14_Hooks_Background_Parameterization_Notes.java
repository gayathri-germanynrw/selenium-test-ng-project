package notes_from_d5_selenium;

public class d14_Hooks_Background_Parameterization_Notes {
    /*
    Today's schedule:
- Tell me about your framework?
--------------------------------------------------
CUCUMBER SCHEDULE
#1- dryRun
#2- tags
#3- html reports
#4- Background
#5- Hooks
#6- Parameterization
 - TakesScreenShot
#7- dataTables
#8- scenario outlines
#9- parallel testing
#10- report generation
--------------------------------------------------
TELL ME ABOUT YOUR FRAMEWORK?
- WHAT IS A FRAMEWORK?
 - Frameworks are basically commonly used, and proven approach of
creating file and folder structure, creating smart logic (implementing
design patterns, utilities) to be able to easily handle and maintain
our project
- WHY DO WE NEED TO CREATE A FRAMEWORK?
 - Reusability
 - Maintainability
 - Scalability
 - Accessibility
 - Managability
 - Ease of use
- TELL ME ABOUT YOUR FRAMEWORK?
 - Basically they want to hear how did you create and structured
your project, and what did you use in it to make it functional,
reusable, scalable etc.
 - What tools we used in our project?
 - Which programming language we used in our project?
 - Which testing tools we used in our project?
 - Which development approach we choose in our project?
 - What kind of folder structure you created, and why?
- I used Java programming language.
- Selenium
- Junit
- Cucumber for BDD
- Cucumber HTML Reports
- Maven
- Design patterns:
 - POM Design Pattern (Pages & WebElements)
 - Singleton Design Pattern (Driver utility)
- Created a package where we stored different types of utility classes
 - BrowserUtils
 - Driver
 - ConfigurationReader
- pom.xml
- configuration.properties
----------------------------------------------------------------------
-----------------
- What does your frameworks folder structure look like?
How it started:
 -src
 -main
 -java
 -pom.xml
How its going:
 -src
 -main
 -test
 -java
 -com.cydeo
 -step_definitions
 -Library_StepDefinitions.java
 -runners
 -CukesRunner.java
 -pages
 -utilities
 - Driver.java
 - ConfigurationReader.java
 - BrowserUtils.java
 -resources
 - features
 - Login.feature
 - testData
 -pom.xml
 -configuration.properties
----------------------------------------------------------------------
-----------------
- WHAT IS TDD?
 - BUG FREE DEVELOPMENT
- WHAT IS THE FLOW OF IMPLEMENTATION FOR TDD?
 #1- Write unit tests
 #2- Run the tests
 #3- Tests will fail
 #4- Write the code to pass the tests
 #5- Run the tests again
 #6- Tests will PASS!
 #7- Refactore and repeat!
- WHAT IS BDD?
 - Behaviour Driven Development
 - BDD is an extension of TDD.
 - What does it mean?
 - It means that the overall implementation flow is very VERY
similar.
- HOW IS BDD IS SIMILAR TO TDD?
 - Instead of writing TESTS, we write SCENARIOS in BDD.
 - We implement in a similar way in the TDD to turn the Scenarios
into actions
 (using
JAVA+SELENIUM+JUNIT)
- WHAT ARE THE 2 LAYERS OF BDD?
#1 - BUSINESS LAYER
#2 - IMPLEMENTATION LAYER
#1- BUSINESS LAYER (- Feature files)

 - Feature files are written in Gherkin language (in Cucumber)
which is basically English
 - Technical and non-technical people can read and understand these
documents in details.
 - Certain keywords are used to make sense in feature files
 - Feature
 - Scenario
 - Given
 - When
 - Then
 - But
 - And
#2- IMPLEMENTATION LAYER ( - Step definitions)
 - We are using the preferred programming language and other tools
to implement the scenario that are written in the feature files.
 - We generate snippets and implement them in the step_definitions
package
- WHAT IS A SNIPPET?
 - Basically unimplemented step definition methods that are
automatically generated by cucumber for us to implement.
- Different ways to generate a snippet?
#1- Run the runner class to generate snippets for unimplemented steps
in feature files.
#2- Hover over with mouse, and select "Create step definition" or
"Create all step definitions"
#3- Put the cursor on the line and use the keyboard shortcuts below
 - MAC : "option + enter"
 - WINDOWS : "alt + enter"
- dryRun
 - If I just want to generate snippets and dont even want to
execute the already implemented steps, I can turn dryRun on by passing
boolean value true
 - dryRun = true; --> turned on, and will not execute the
implemented steps
 - dryRun = false; --> turned off, and will execute the
implemented steps
- tags:
 - tags are used to group different scenarios in different test
suites.
 - regression
 - smoke
 - @module1
 - @interestCollections
 - we can have as many tags as we want
 - and the name doesnt have to make sense
- html reports
 - we can generate reports using
 "html:target/cucumber-reports.html",
 html: --> determines the type of the report
 target/ --> we are deciding we do we store this report
 cucumber-reports.html --> we are giving the report file a name
----------------------------------------------------------------------
-----------------
BACKGROUND:
 - Background is very similar to @BeforeMethod in TestNG.
 - @BeforeMethod runs before each test in that specific class.
 - Background steps will be executed once before each scenario in
that feature file.
 - It will be executed ONCE.
 - It will only work for the scenarios in the same feature
file.
 - We need to make sure from where the Background left off, all
of the scenarios should be able to pick up and continue with the test
execution.
----------------------------------------------------------------------
-----------------
HOOKS:
 - Hooks will allow us to create PRE and POST conditions for ALL of
the scenarios in our project.
 - Hooks class is separated from the feature file.
 - Because we will be using programming logic, we will store the
Hooks class under 'step_definitions' package
- What are the differences between the "Background" and "Hooks"?
 - Background is for the "BUSINESS" side of the BDD. (for the nontechnical people)
 - HOOKS is for the "IMPLEMENTATION" side of the BDD (for the
technical people)
- By default:
 - Background only applies to all of the scenario in the same
feature file.
 - Hooks will apply to all of the scenarios in the PROJECT.
 - BUT! We can use @Tags to limit which scenarios these @Before
@After will apply.
 - If we have more than one @Before @After, we can run them in the
order we want them to be executed using "order=1". The smaller the
number, the earlier it will be executed.
- @Before : This will be executed before all of the scenarios
- @After : This will be executed AFTER all of the scenarios
- @BeforeStep : This will be executed before all of the STEPS in ALL
OF THE SCENARIOS
- @AfterStep : This will be executed AFTER all of the STEPS in ALL
OF THE SCENARIOS
- These method can be used for different types of setups and teardowns
 - opening browser
 - maximizing browser
 - connecting database
 - close connection to database
 - close the browser
 @Before (order = 1)
 public void setupMethod(){
 System.out.println("---> @Before: RUNNING BEFORE EACH
SCENARIO");
 }
 @After
 public void teardownMethod(){
 System.out.println("---> @After: RUNNING AFTER EACH
SCENARIO");
 }
 @BeforeStep
 public void setupStep(){
 System.out.println("-----> @BeforeSTEP : Running before each
step!");
 }
 @AfterStep
 public void teardownStep(){
 System.out.println("-----> @AfterSTEP : Running after each
step!");
 }
----------------------------------------------------------------------
---------------
BDD IMPLEMENTATION TEMPLATE
- TEMPLATE: Steps to implement a new scenario from the beginning:
#0- Create a feature file and define the feature and agile story
(stories)
#1- Create the Scenario and Steps in the .feature file.
#2- Create snippets and add them into 'step_definitions' class
#3- Start implementing the empty snippets
#4- Create POM design Pages and locate web elements (if not already
created)
#5- Create the object in the "step_definitions" class to implement the
JAVA+SELENIUM logic
#6- Make sure the scenario is passing.
----------------------------------------------------------------------
---------------
PARAMETERIZATION : CUCUMBER EXPRESSIONS
- Cucumber Expressions (Parameterization) is being able to pass test
data from the feature files.
- Using Cucumber Expressions, we can pass String, int, float, {word},
and even create our own object types to be able to pass from the
feature file as test data.
- We are allowed to pass java types, and non-java types.
- Java types: String, int, float, double, etc...
- Non-java types: {word}
- Also we can create our own Object types to be able to pass from
feature files
- We can pass more than 1 argument in 1 step.
----------------------------------------------------------------------
---------------
TAKE SCREEN SHOT
- We use a method that is coming from TakesScreenShot interface coming
from Selenium Library.
- Since we are using WebDriver/ChromeDriver object, to be able to use
the methods that are coming from TakesScreenShot interface, we have to
cast our object type to TakesScreenShot.
- After that we will be able to use the method named
".getScreenshotAs()"
- We also have a class called Scenario, coming from cucumber.io
library.
- This Scenario class' object is keeping track of some of time simple
data about the scenario that is currently being executed, such as;
 - If scenario failed or passed
 - Current scenario name
 - We can also attach screenshot using this object as well.
SYNTAX:
 if (scenario.isFailed()) {
 byte[] screenshot = ((TakesScreenshot)
Driver.getDriver()).getScreenshotAs(OutputType.BYTES);
 scenario.attach(screenshot, "image/png", scenario.getName());
 }
----------------------------------------------------------------------
--------------
1- if (scenario.isFailed()) --> If scenario fails, this line will
return "true"
2- byte[] screenshot = --> We are creating an array of bytes to
be able to store our screenshot
3- ((TakesScreenshot) Driver.getDriver()) --> We are casting our
ChromeDriver type to TakesScreenshot
4- getScreenshotAs(OutputType.BYTES); --> We are returning the
screenshot as BYTES so we can use it.

5- scenario.attach(arg1, arg2, arg3) --> This method is able to
attach the provided SS to our report.
 - It accepts 3 arguments:
 #1- arg1 --> screenshot as array of bytes
 #2- arg2 --> image type --> "image/png"
 #3- arg3 --> String scenarioName --> scenario.getName()
----------------------------------------------------------------------
--------------

     */
}
